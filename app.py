# STARTING PAGE
import streamlit as st
from PIL import Image

st.set_page_config(
     page_title="cvCy - ‚ô• IA of Gael Ahouanvoedo",
     page_icon="ü§•",
     initial_sidebar_state="expanded",
 )

with st.sidebar:
         image = Image.open('C:/Users/LENOVO/DATA/FUTURE/CV/log.png')
         st.image(image, width=180)
         with open('C:/Users/LENOVO/DATA/FUTURE/CV/CV.pdf', "rb") as file:
             btn = st.download_button(
             label="T√©l√©charger mon CV",
             data=file,
             file_name="CV GAEL AHOUANVOEDO.pdf",
             mime="CV GAEL AHOUANVOEDO/pdf"
                )
             st.text('Pour toutes collaboration')
             menu = st.selectbox("",('Introduction',"Charger","Rechercher"))
             st.success("Lancez l'application ici")
             st.subheader("Informations")
             st.write("Cette application permet d'analyser les sentiments de donn√©es textuelles.",unsafe_allow_html=True)
             '***' 
             '**Build with ‚ô• by Gael Ahouanvoedo**'

if menu == ("Introduction"):
    

    st.write("""
    # S√©lection de CV.
    
    Cette application permet de s√©lectionner le CV qui r√©pond le mieux √† une liste de comp√©tences. 
                   
    """)
    
    ''
    ''
    
    st.write("""
    **üëà Pour continuer, s√©lectionnez "Lancer l'app" dans la barre lat√©rale.**             
    """)
    
    st.write("""
    ### Credit
    Gael Ahouanvoedo, sayadebayo@gmail.com
                 
    """)

    
    st.write("""
    ### LinkedIn
    https://www.linkedin.com/in/gaelahouanvoedo/         
    """)
    
    st.write("""
    ### Avertissement
    Il s'agit uniquement d'une √©tude exp√©rimentale et non d'un proc√©d√© exploitable aupr√®s d'une structure tiers. Nous ne sommes en aucun cas, responsable d'une utilisation √† des fins autre que de testing.
    """)

# FORMULAIRE

if menu == ("Charger"):
    #importer image
    image = Image.open('C:/Users/LENOVO/DATA/FUTURE/CV/log.png')
    #centrer image
    col1, col2, col3 = st.columns(3)
    with col1:
        st.write(' ')
    with col2:
        st.image(image, width=250)
    with col3:
        st.write(' ')
        
    
    # Titre de l'application
    st.title("Chargez un CV.")

    import sqlite3
    import os
    import PyPDF2

    # V√©rifier si la base de donn√©es existe
    if not os.path.exists('C:/Users/LENOVO/DATA/FUTURE/CV/recrutement.db'):
        # Cr√©er la base de donn√©es
        conn = sqlite3.connect('C:/Users/LENOVO/DATA/FUTURE/CV/recrutement.db')
        conn.close()

    # Fonction pour cr√©er la table dans la base de donn√©es
    def create_table():
        conn = sqlite3.connect('C:/Users/LENOVO/DATA/FUTURE/CV/recrutement.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS candidats
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nom TEXT,
                    prenom TEXT,
                    email TEXT,
                    cv TEXT)''')
        conn.commit()
        conn.close()

    # Fonction pour extraire le texte d'un fichier PDF
    def extract_text_from_pdf(file):
        pdf_reader = PyPDF2.PdfFileReader(file)
        text = ""
        for page in range(pdf_reader.numPages):
            text += pdf_reader.getPage(page).extractText()
        return text

    # Fonction pour extraire le texte d'un fichier DOCX
    def extract_text_from_docx(file):
        doc = Document(file)
        paragraphs = doc.paragraphs
        text = ""
        for paragraph in paragraphs:
            text += paragraph.text + "\n"
        return text

    # Fonction pour ins√©rer les donn√©es dans la base de donn√©es
    def insert_data(nom, prenom, email, cv):
        if cv.type == "application/pdf":
            cv_text = extract_text_from_pdf(cv)
        else:
            st.warning("Format de fichier non pris en charge. Veuillez t√©l√©charger un fichier PDF.")
            return
        
        conn = sqlite3.connect('C:/Users/LENOVO/DATA/FUTURE/CV/recrutement.db')
        c = conn.cursor()
        c.execute("INSERT INTO candidats (nom, prenom, email, cv) VALUES (?, ?, ?, ?)",
                (nom, prenom, email, cv_text))
        conn.commit()
        conn.close()

    # Fonction principale de l'application Streamlit
    def formulaire_recrutement():
        
        # Champ Nom
        nom = st.text_input("Nom")
        
        # Champ Pr√©nom
        prenom = st.text_input("Pr√©nom")
        
        # Champ Adresse e-mail
        email = st.text_input("Adresse e-mail")
        
        # Champ CV (T√©l√©chargement de fichier)
        cv = st.file_uploader("CV du candidat", type=["pdf"])
        
        # Bouton de soumission
        if st.button("Soumettre"):
            if nom and prenom and email and cv:
                # Ins√©rer les donn√©es dans la base de donn√©es
                insert_data(nom, prenom, email, cv)
                st.success("CV soumis avec succ√®s !")
            else:
                st.warning("Veuillez remplir tous les champs du formulaire.")

    # Cr√©er la table dans la base de donn√©es (si elle n'existe pas d√©j√†)
    create_table()

    # Ex√©cuter l'application Streamlit
    formulaire_recrutement()

#APP

import os
import PyPDF2
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

import warnings
warnings.filterwarnings(action = 'ignore')



if menu == ("Rechercher"):
    #importer image
    image = Image.open('C:/Users/LENOVO/DATA/FUTURE/CV/log.png')
    #centrer image
    col1, col2, col3 = st.columns(3)
    with col1:
        st.write(' ')
    with col2:
        st.image(image, width=250)
    with col3:
        st.write(' ')
        
    
    # Titre de l'application
    st.title("Trouvez le meilleur canditat.")

    import os
    import PyPDF2
    import pandas as pd
    import streamlit as st

    import sqlite3

    # √âtablir une connexion √† la base de donn√©es
    conn = sqlite3.connect('C:/Users/LENOVO/DATA/FUTURE/CV/recrutement.db')

    # Cr√©er un curseur pour ex√©cuter des requ√™tes SQL
    cur = conn.cursor()

    # Ex√©cuter une requ√™te SQL pour extraire la table (remplacez "nom_table" par le nom r√©el de la table)
    cur.execute('SELECT * FROM candidats')

    # R√©cup√©rer les r√©sultats de la requ√™te dans une liste de tuples
    table_data = cur.fetchall()

    # R√©cup√©rer les noms des colonnes de la table
    column_names = [description[0] for description in cur.description]

    # Fermer le curseur et la connexion √† la base de donn√©es
    cur.close()
    conn.close()

    # Cr√©er un dataframe √† partir des donn√©es r√©cup√©r√©es
    df = pd.DataFrame(table_data, columns=column_names)

    df.drop(['id'],axis=1,inplace=True)

    # Champ de saisie pour l'utilisateur
    user_input = st.text_input("Saisir des comp√©tences s√©par√©es par des virgules : ")

    # Stocker les valeurs saisies dans une liste
    competences = user_input.split(',')

    # Bouton pour lancer la recherche
    if st.button("Rechercher"):

        # Cr√©ation du DataFrame df_select vide
        df_select = pd.DataFrame(columns=df.columns)

        # Parcours du DataFrame df
        for index, row in df.iterrows():
            cv = row['cv']
            for competence in competences:
                if competence.lower() in cv.lower():
                    df_select = df_select.append(row, ignore_index=True)
                    break

        # Ajouter une nouvelle colonne "skills" √† df_select
        df_select['skills'] = df_select['cv'].apply(lambda x: [comp for comp in competences if comp.lower() in x.lower()])
        df_select.drop(['cv'],axis=1,inplace=True)

        from sklearn.feature_extraction.text import CountVectorizer
        from sklearn.metrics.pairwise import cosine_similarity

        # Cr√©er une instance de CountVectorizer
        vectorizer = CountVectorizer()

        # Transformer les comp√©tences en une matrice de vecteurs
        skills_matrix = vectorizer.fit_transform(df_select['skills'].apply(lambda x: ', '.join(x)))

        # Calculer la similarit√© cosinus entre les comp√©tences recherch√©es et les comp√©tences de chaque ligne
        similarity_scores = cosine_similarity(skills_matrix, vectorizer.transform([', '.join(competences)]))

        # Ajouter une colonne "similarity" au DataFrame df_select avec les scores de similarit√©
        df_select['similarite'] = similarity_scores.flatten()
        df_select = df_select.sort_values('similarite', ascending=False)


        # Afficher le DataFrame df_select avec la colonne "similarity"
        st.write(df_select)




        
        

    
         
